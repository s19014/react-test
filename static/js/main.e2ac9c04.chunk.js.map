{"version":3,"sources":["RatesView.js","App.js","serviceWorker.js","index.js"],"names":["RatesView","props","state","isLoaded","error","rates","base","date","resultScreen","judge","value","countriy","countryIndex","resultErase","window","fetch","then","res","json","result","setState","this","refs","newText","e","target","country","Object","keys","indexOf","list","len","length","i","push","options","map","key","className","Math","round","values","message","onChange","countryChange","type","ref","doChange","Button","variant","color","onClick","buttonClickJpy","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e2ac9c04.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Button from '@material-ui/core/Button'\n\nclass RatesView extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      error: null,\n      rates: [], // ratesの中身、keyは通貨のアルファベット３文字、valueは１円と等しい額\n      base: '', // JPYが取れる、日本円\n      date: '', // いつのデータか\n      resultScreen: false, // 計算結果の表示\n      judge: false, // 何だったか忘れた 多分計算結果を画面に出力するのに必要だったかも\n      value: '', // inputに入力した値\n      countriy: '', // keyになっている通貨のアルファベット３文字\n      countryIndex: '', // keyのインデックス\n      resultErase: false // 希望通貨を選ぶと計算結果を消したいときに使う\n    }\n  }\n\n  componentDidMount () {\n    window\n      .fetch('https://api.exchangeratesapi.io/latest?base=JPY')\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            rates: result.rates,\n            base: result.base,\n            date: result.date\n          })\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          })\n        }\n      )\n  }\n\n  buttonClickJpy () {\n    this.setState({\n      resultScreen: true,\n      judge: true,\n      resultErase: true\n    })\n    this.refs.newText.value = ''\n  }\n\n  doChange (e) {\n    this.setState({ value: e.target.value, resultErase: false })\n  }\n\n  countryChange (e) {\n    this.setState({\n      country: e.target.value,\n      countryIndex: Object.keys(this.state.rates).indexOf(e.target.value),\n      resultErase: false\n    })\n  }\n\n  render () {\n    var list = []\n    const len = Object.keys(this.state.rates).length\n    for (let i = 0; i < len; i++) {\n      list.push(Object.keys(this.state.rates)[i])\n    }\n\n    const options = list.map(e => {\n      return (\n        <option key={e} value={e}>\n          {e}\n        </option>\n      )\n    })\n\n    let result\n    if (this.state.resultScreen && this.state.judge && this.state.resultErase) {\n      if (this.state.value < 0) {\n        result = <div className='error'>正しく入力してください</div>\n      } else if (this.state.countryIndex === '') {\n        result = <div className='error'>正しく入力してください</div>\n      } else {\n        result = (\n          <div className='result'>\n            {this.state.value}\n            <span className='unit'>円</span> ={' '}\n            {Math.round(\n              this.state.value *\n                Object.values(this.state.rates)[this.state.countryIndex] *\n                100\n            ) / 100}\n            <span className='unit'>{this.state.country}</span>\n          </div>\n        )\n      }\n    }\n\n    if (this.state.error) {\n      return <div>Error: {this.state.error.message}</div>\n    } else if (!this.state.isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      return (\n        <div>\n          <h1>外国為替 計算</h1>\n          <div className='rate'>\n            <div className='rateJpy'>\n              <h2>\n                {this.state.date} {this.state.base}を他の通貨に換算\n              </h2>\n              <p className='preferred-currency'>希望通貨</p>\n              <br />\n              <select onChange={(e) => this.countryChange(e)}>\n                <option value=''>-----</option>\n                {options}\n              </select>\n              <br />\n              <div className='label'>\n                <label>\n                  {' '}\n                  数値を入力(日本円)\n                  <br />\n                  <input\n                    type='number'\n                    ref='newText'\n                    onChange={e => this.doChange(e)}\n                  />\n                </label>\n              </div>\n              <div className='button'>\n                <Button\n                  variant='contained'\n                  color='primary'\n                  className='button'\n                  onClick={() => {\n                    this.buttonClickJpy()\n                  }}\n                >\n                  計算\n                </Button>\n              </div>\n            </div>\n          </div>\n          {result}\n        </div>\n      )\n    }\n  }\n}\n\nexport default RatesView\n","import React from 'react'\nimport './App.css'\nimport RatesView from './RatesView'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {}\n  }\n\n  render () {\n    return <RatesView />\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}